class MoviesAdapter(
    private val context: Context,
    private var moviesList: ArrayList<VideoDataModel>,
    private val onPlayListener: OnPlayListener
) : RecyclerView.Adapter<MoviesAdapter.MoviesViewHolder>() {

    inner class MoviesViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val binding = RawVideosListBinding.bind(itemView)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MoviesViewHolder {
        val view =
            LayoutInflater.from(parent.context).inflate(R.layout.raw_videos_list, parent, false)
        return MoviesViewHolder(view)
    }

    override fun onBindViewHolder(holder: MoviesViewHolder, position: Int) {
        val itemModel = moviesList[position]

        val url = itemModel.videoPath.replaceAfter("sample/", "")
        Glide.with(holder.itemView).load(url + itemModel.image).into(holder.binding.ivMovieThumb)
        Log.d("url", "onBindViewHolder:  ${url + itemModel.image}")

        holder.binding.tvMovieName.text = itemModel.title
        holder.binding.tvMovieDescription.text = itemModel.description
        holder.binding.tvMovieBy.text = itemModel.sources

        holder.binding.btnPlay.setOnClickListener {
            //itemModel.videoPath
            onPlayListener.onPlayListener(itemModel.videoPath)
        }
    }
    
    //fillter and search data
    fun filterData(itemList: ArrayList<ItemModel>){
        itemList.forEach {
            Log.d("filter", "searchList: ${itemList[0].itemName}")
        }
        this.itemList = itemList
        notifyDataSetChanged()
    }


    override fun getItemCount(): Int {
        return moviesList.size
    }

}

==========================================================
#search from edittext function

 private fun searchList(text: String) {
        val filterList = ArrayList<ItemModel>()
        Log.d("check", "searchList: text $text")

        for (i in 0 until ItemList.size) {
            Log.d("check", "searchList: ${productList[i].productName}")
            if (ItemList[i].productName.contains(text) or
                ItemList[i].productDescription.contains(text) or
                ItemList[i].productStorage.toString().contains(text) or
                ItemList[i].productRam.toString().contains(text)
            ) {
                filterList.add(
                    ItemModel(
                        ItemList[i].productId,
                        ItemList[i].productName,
                        ItemList[i].productDescription,
                        ItemList[i].productStorage,
                        ItemList[i].productRam,
                    )
                )
            }
        }

        ItemAdapter.filterData(filterList)
    }

==========================================================

class InputField<T>(
    private val initialValue: T? = null,
    private val errorMessage: String? = null,
    private val validator: (T?) -> Boolean
) {
    val flow = MutableStateFlow(initialValue)

    private val _error = MutableStateFlow<String?>(null)
    val errorText: StateFlow<String?>
        get() = _error

    @Suppress("UNCHECKED_CAST")
    fun isValid() = if (validator(flow.value)) {
        _error.value = null
        true
    } else {
        _error.value = errorMessage
        false
    }

    fun reset() {
        flow.value = initialValue
    }
}



